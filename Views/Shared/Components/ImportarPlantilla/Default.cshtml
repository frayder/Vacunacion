@model object

@using System.Reflection
@{
    // Parámetros que puedes pasar cuando invocas el componente
    var title = (string?)ViewData["Title"] ?? "Importar";
    var downloadAction = (string?)ViewData["DownloadAction"] ?? "DescargarPlantilla";
    var indexAction = (string?)ViewData["IndexAction"] ?? "Index";
    var importAction = (string?)ViewData["ImportAction"] ?? "ImportarPlantilla";
    var saveAction = (string?)ViewData["SaveAction"] ?? "GuardarImportados";
    var controller = (string?)ViewData["Controller"] ?? "";
    Console.WriteLine($"Controlador para acciones: {controller}");
    // Nombre de la propiedad que contiene la colección cargada en el modelo.
    // Pásalo al invocar: new { model = Model, loadedCollection = "TiposCarnetCargados" }
    var loadedCollectionName = (string?)ViewData["LoadedCollection"] ?? (string?)ViewData["loadedCollection"] ?? "TiposCarnetCargados";

    IEnumerable<object>? items = null;
    int itemsCount = 0;

    if (Model != null)
    {
        var modelType = Model.GetType();
        // Intentar obtener la propiedad exactamente con el nombre pedido
        var prop = modelType.GetProperty(loadedCollectionName ?? "", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);

        // Si no existe, buscar la primera propiedad pública que termine en "Cargados"
        if (prop == null)
        {
            prop = modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                            .FirstOrDefault(p => p.Name.EndsWith("Cargados", StringComparison.OrdinalIgnoreCase));
        }

        if (prop != null)
        {
            var val = prop.GetValue(Model);
            if (val is System.Collections.IEnumerable enumerable)
            {
                items = enumerable.Cast<object>().ToList();
                itemsCount = items.Count();
            }
        }
    }

    bool datosCargados = items != null && itemsCount > 0;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <div>
                    <h4 class="mb-sm-0">@title</h4>
                    <div class="page-title-right">
                        <ol class="breadcrumb m-0">
                            <li class="breadcrumb-item"><a href="@Url.Action(indexAction)">@title</a></li>
                            <li class="breadcrumb-item active">Importar</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-8 col-lg-10 mx-auto">
            <!-- Instrucciones -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="ri-information-line me-2"></i>Instrucciones de Importación
                    </h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <h6 class="alert-heading">Antes de importar:</h6>
                        <ul class="mb-0">
                            <li>Descargue la plantilla de Excel desde el botón "Descargar Plantilla"</li>
                            <li>Complete la información en las columnas correspondientes</li>
                            <li>Los campos obligatorios varían según el tipo de entidad</li>
                            <li>Los elementos existentes (por identificador) serán actualizados</li>
                        </ul>
                    </div>

                    <div class="text-center mb-3">
                        <a href="@Url.Action(downloadAction)" class="btn btn-outline-primary">
                            <i class="ri-download-line me-1"></i>Descargar Plantilla Excel
                        </a>
                    </div>
                </div>
            </div>

            <!-- Errores -->
            @if (ViewBag.Errores != null)
            {
                <div class="card mb-4">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0">Errores encontrados</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled mb-0">
                            @foreach (var error in (List<string>)ViewBag.Errores)
                            {
                                <li class="text-danger"><i class="ri-error-warning-line me-1"></i>@error</li>
                            }
                        </ul>
                    </div>
                </div>
            }

            <!-- Formulario de importación -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="ri-upload-cloud-line me-2"></i>Cargar Archivo
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="@importAction" method="post" enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        @if (!datosCargados)
                        {
                            <div class="mb-4">
                                <label class="form-label">Archivo Excel <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    @* Intentamos enlazar a ArchivoExcel si existe en el modelo padre *@
                                    @if (Model != null && Model.GetType().GetProperty("ArchivoExcel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase) != null)
                                    {
                                        <input name="ArchivoExcel" type="file" class="form-control" accept=".xlsx,.xls" />
                                    }
                                    else
                                    {
                                        <input type="file" class="form-control" accept=".xlsx,.xls" />
                                    }
                                    <span class="input-group-text">
                                        <i class="ri-file-excel-line"></i>
                                    </span>
                                </div>
                                <div class="form-text">Seleccione un archivo Excel (.xlsx o .xls)</div>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="ri-upload-cloud-line me-1"></i>Procesar Archivo
                                </button>
                                <a href="@Url.Action(indexAction)" class="btn btn-secondary">
                                    <i class="ri-arrow-left-line me-1"></i>Volver
                                </a>
                            </div>
                        }

                        @if (datosCargados)
                        {
                            <div class="card mt-4">
                                <div class="card-header bg-success text-white">
                                    <h5 class="mb-0">Elementos a Importar (@itemsCount)</h5>
                                </div>
                                <div class="card-body table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Código</th>
                                                <th>Nombre</th>
                                                <th>Descripción</th>
                                                <th>Estado</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var tipo in items)
                                            {
                                                // Intentar extraer propiedades comunes; fallback si no existen
                                                var tipoType = tipo?.GetType();
                                                var codigo = tipoType?.GetProperty("Codigo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString();
                                                var nombre = tipoType?.GetProperty("Nombre", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString();
                                                var descripcion = tipoType?.GetProperty("Descripcion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString()
                                                                  ?? tipoType?.GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString();
                                                var estadoTexto = tipoType?.GetProperty("EstadoTexto", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString();
                                                var estadoClass = tipoType?.GetProperty("EstadoClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase)?.GetValue(tipo)?.ToString() ?? "";

                                                if (codigo == null && nombre == null && descripcion == null)
                                                {
                                                    <tr>
                                                        <td colspan="4">@tipo?.ToString()</td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td><strong>@(codigo ?? "-")</strong></td>
                                                        <td>@(nombre ?? "-")</td>
                                                        <td>@(string.IsNullOrWhiteSpace(descripcion) ? "Sin descripción" : descripcion)</td>
                                                        <td><span class="@estadoClass">@estadoTexto</span></td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer">
                                    <div class="d-flex gap-2 justify-content-end">
                                        @* Botón que envía POST a la acción de Guardar en el controlador TipoCarnet *@
                                        <button
                                            type="submit"
                                            class="btn btn-success"
                                            formaction="@Url.Action(saveAction, controller)"
                                            formmethod="post">
                                            <i class="ri-save-line me-1"></i>Confirmar Importación
                                        </button>

                                        <a href="@Url.Action(importAction)" class="btn btn-warning">
                                            <i class="ri-refresh-line me-1"></i>Cargar Otro Archivo
                                        </a>
                                        <a href="@Url.Action(indexAction)" class="btn btn-secondary">
                                            <i class="ri-close-line me-1"></i>Cancelar
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@* Nota: Si tu layout espera @section Scripts, inclúyelo en la vista padre. Si quieres que el componente incluya validaciones, descomenta la línea siguiente: *@
@* @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); } *@
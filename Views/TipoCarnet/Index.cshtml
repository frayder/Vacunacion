@using Highdmin.ViewComponents
@model TipoCarnetViewModel
@{
    ViewData["Title"] = "Configuración de Tipos de Carnet";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

<!-- Info Card -->
@await Component.InvokeAsync("GradientCard", new {
title = "Configuración de Tipos de Carnet",
description = "Administre los tipos de carnet disponibles para el registro de vacunación.",
icon = "ri-file-list-3-line",
startColor = "#667eea",
endColor = "#764ba2"
})

<!-- Main Content Card -->
<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center">
            <div class="flex-shrink-0">
                <div class="avatar-sm">
                    <span class="avatar-title bg-primary-subtle text-primary rounded-circle fs-5">
                        <i class="ri-file-list-3-line"></i>
                    </span>
                </div>
            </div>
            <div class="flex-grow-1 ms-3">
                <h5 class="card-title mb-1">Tipos de Carnet (@Model.TotalTipos)</h5>
                <p class="text-muted mb-0">Gestione los tipos de carnet disponibles para el sistema de vacunación</p>
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- Search and Filter Bar -->
        <div class="row g-3 mb-4">
            <div class="col-xxl-5 col-sm-6">
                <div class="search-box">
                    <input type="text" class="form-control search" placeholder="Buscar por código o nombre...">
                </div>
            </div>
            <div class="col-xxl-2 col-sm-6">
                <div>
                    <select class="form-control" data-plugin="choices" data-choices data-choices-search-false
                        name="choices-single-default" id="idStatus">
                        <option value="">Todos los estados</option>
                        <option value="true" selected>Activo</option>
                        <option value="false">Inactivo</option>
                    </select>
                </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
                <div>
                    <button type="button" class="btn btn-primary w-100" onclick="SearchData();">
                        <i class="ri-equalizer-fill me-1 align-bottom"></i> Filtros
                    </button>
                </div>
            </div>
            <div class="col-xxl-3 col-sm-8">
                <div class="d-flex gap-2">
                    @if (Model.CanCreate)
                    {
                        <a asp-action="Crear" class="btn btn-success add-btn">
                            <i class="ri-add-line align-bottom me-1"></i> Agregar
                        </a>
                    }
                    @await Component.InvokeAsync("ImportExportButtons", new {
                    controller = "TipoCarnet",
                                        importAction = "ImportarPlantilla",
                                        exportAction = "Exportar",
                                        importLabel = "Importar",
                                        exportLabel = "Exportar",
                                        importClass = "btn btn-info",
                                        exportClass = "btn btn-warning",
                                        showImport = true,
                                        showExport = true
                                        })
                </div>
            </div>
        </div>

        <!-- Alerts -->
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible alert-label-icon fade show" role="alert">
                <i class="ri-check-double-line label-icon"></i><strong>Éxito</strong> - @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible alert-label-icon fade show" role="alert">
                <i class="ri-error-warning-line label-icon"></i><strong>Error</strong> - @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Table -->
        <div class="table-responsive table-card mt-3 mb-1">
            <table class="table align-middle table-nowrap" id="customerTable">
                <thead class="table-light">
                    <tr>
                        <th class="sort" data-sort="codigo">Código</th>
                        <th class="sort" data-sort="nombre">Nombre</th>
                        <th class="sort" data-sort="descripcion">Descripción</th>
                        <th class="sort" data-sort="estado">Estado</th>
                        <th class="sort" data-sort="fecha">Fecha Creación</th>
                        @if (Model.CanUpdate || Model.CanDelete)
                        {
                            <th class="sort text-center" data-sort="action">Acciones</th>
                        }
                    </tr>
                </thead>
                <tbody class="list form-check-all">
                    @if (Model.TiposCarnet != null && Model.TiposCarnet.Any())
                    {
                        @foreach (var item in Model.TiposCarnet)
                        {
                            <tr>
                                <td class="codigo">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-shrink-0 me-1">
                                            <div class="avatar-xs">
                                                <div class="avatar-title rounded-circle bg-warning-subtle text-warning">
                                                    @item.Codigo.Substring(0, 1)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h5 class="fs-13 mb-0">@item.Codigo</h5>
                                        </div>
                                    </div>
                                </td>
                                <td class="nombre">@item.Nombre</td>
                                <td class="descripcion">
                                    @if (!string.IsNullOrEmpty(item.Descripcion))
                                    {
                                        <span>@(item.Descripcion.Length > 50 ? item.Descripcion.Substring(0, 50) + "..." :
                                                                            item.Descripcion)</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin descripción</span>
                                    }
                                </td>
                                <td class="estado">
                                    <span class="@item.EstadoClass">@item.EstadoTexto</span>
                                </td>
                                <td class="fecha">@item.FechaCreacion.ToString("dd/MM/yyyy")</td>
                                @if (Model.CanUpdate || Model.CanDelete)
                                {
                                    <td>
                                        @await Component.InvokeAsync("ActionButtons",
                                        ActionButtonsHelper
                                        .CreateDefault(item.Id, "TipoCarnet", $"Código: {item.Codigo}")
                                        .WithEdit(Model.CanUpdate)
                                        .WithDelete(Model.CanDelete, "¿Está seguro de que desea eliminar este tipo de carnet?")) 
                                    </td>
                                }
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <div class="d-flex flex-column align-items-center">
                                    <i class="ri-database-2-line fs-1 text-muted mb-3"></i>
                                    <h5 class="text-muted">No se encontraron tipos de carnet</h5>
                                    <p class="text-muted mb-3">Comience agregando el primer tipo de carnet</p>
                                    @if (Model.CanCreate)
                                    {
                                        <a asp-action="Crear" class="btn btn-primary">
                                            <i class="ri-add-line me-1"></i> Agregar Tipo de Carnet
                                        </a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-end">
            <div class="pagination-wrap hstack gap-2">
                <a class="page-item pagination-prev disabled" href="javascript:void(0);">
                    Anterior
                </a>
                <ul class="pagination listjs-pagination mb-0"></ul>
                <a class="page-item pagination-next" href="javascript:void(0);">
                    Siguiente
                </a>
            </div>
        </div>
    </div>
</div>


@if (Model.CanDelete)
{ 
    @await Component.InvokeAsync("DeleteModal", new Highdmin.ViewComponents.DeleteModalOptions
    {
        Message = "¿Está seguro de que desea eliminar este tipo de carnet?"
    })
}

@section Scripts { 

    <script>

        @if (Model.CanUpdate)
            {
                <text>
                    function editarTipoCarnet(id) {
                        window.location.href = '@Url.Action("Edit", "TipoCarnet")/' + id;
                    }
                </text>
        }
 

                // Initialize list.js for search and pagination
            var options = {
                valueNames: ['codigo', 'nombre', 'descripcion', 'estado', 'fecha'],
                page: 10,
                pagination: true
            };
 

            // Search functionality
            document.querySelector('.search').addEventListener('input', function (e) {
                contactList.search(e.target.value);
            });

            // Counter animation
            document.addEventListener('DOMContentLoaded', function () {
                const counters = document.querySelectorAll('.counter-value');
                counters.forEach(counter => {
                    const target = parseInt(counter.getAttribute('data-target'));
                    const increment = target / 100;
                    let current = 0;

                    const updateCounter = () => {
                        if (current < target) {
                            current += increment;
                            counter.textContent = Math.ceil(current);
                            setTimeout(updateCounter, 20);
                        } else {
                            counter.textContent = target;
                        }
                    };

                    updateCounter();
                });
            });
    </script>
}
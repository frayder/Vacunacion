@model RegistroVacunacionItemViewModel
@{
    ViewData["Title"] = "Nuevo Registro de Vacunación";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0 text-white">
                    <i class="ri-vaccine-line me-2"></i>Formulario por Pasos
                </h5>
                <p class="mb-0 text-white-50">Complete la información de paciente paso a paso</p>
            </div>
            <div class="card-body">
                <!-- Progress Steps -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="badge bg-primary text-white px-3 py-2">Paso 1 de 7</span>
                    </div>

                    <!-- Step indicators -->
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="step-indicator active" data-step="1">
                            <div class="step-circle bg-primary text-white">1</div>
                            <span class="step-label">Datos Básicos</span>
                        </div>
                        <div class="step-indicator" data-step="2">
                            <div class="step-circle">2</div>
                            <span class="step-label">Datos Complementarios</span>
                        </div>
                        <div class="step-indicator" data-step="3">
                            <div class="step-circle">3</div>
                            <span class="step-label">Antecedentes Médicos</span>
                        </div>
                        <div class="step-indicator" data-step="4">
                            <div class="step-circle">4</div>
                            <span class="step-label">Condición Usuario</span>
                        </div>
                        <div class="step-indicator" data-step="5">
                            <div class="step-circle">5</div>
                            <span class="step-label">Médico/Cuidador</span>
                        </div>
                        <div class="step-indicator" data-step="6">
                            <div class="step-circle">6</div>
                            <span class="step-label">Esquema Vacunación</span>
                        </div>
                        <div class="step-indicator" data-step="7">
                            <div class="step-circle">7</div>
                            <span class="step-label">Responsable</span>
                        </div>
                    </div>
                </div>

                <form asp-action="Nuevo" method="post" id="vacunacionForm">
                    <!-- Hidden fields for model binding -->
                    @* <input type="hidden" asp-for="Paciente" /> *@

                    <!-- Dynamic Step Container -->
                    <div id="step-container">
                        <!-- Steps will be loaded here dynamically -->
                        <partial name="Steps/_DatosBasicos" model="Model" />
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="d-flex justify-content-between mt-4">
                        <button type="button" class="btn btn-secondary" id="prevBtn" style="display: none;">
                            <i class="ri-arrow-left-line me-1"></i> Anterior
                        </button>
                        <div class="ms-auto">
                            <button type="button" class="btn btn-primary" id="nextBtn">
                                Siguiente <i class="ri-arrow-right-line ms-1"></i>
                            </button>
                            <button type="submit" class="btn btn-success" id="submitBtn" style="display: none;">
                                <i class="ri-save-line me-1"></i> Guardar Registro
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .step-indicator {
            text-align: center;
            flex: 1;
            position: relative;
        }

        .step-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .step-indicator.active .step-circle {
            background-color: #5d87ff;
            border-color: #5d87ff;
            color: white;
        }

        .step-indicator.completed .step-circle {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }

        /* Estilos para antecedentes médicos */
        .form-label .text-danger {
            font-weight: bold;
        }

        #listaAntecedentes {
            border-top: 1px solid #dee2e6;
            padding-top: 1rem;
            margin-top: 1rem;
        }

        #listaAntecedentes .table td {
            vertical-align: middle;
        }

        #listaAntecedentes .btn-danger {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .form-control:invalid {
            border-color: #dc3545;
        }

        .form-control:valid {
            border-color: #28a745;
        }

        .step-label {
            font-size: 12px;
            color: #6c757d;
            display: block;
        }

        .step-indicator.active .step-label {
            color: #5d87ff;
            font-weight: 600;
        }

        .step-content {
            display: none;
        }

        .step-content.active {
            display: block;
        }

        .step-indicator:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 20px;
            right: -50%;
            left: 50%;
            height: 2px;
            background-color: #dee2e6;
            z-index: -1;
        }

        .step-indicator.completed:not(:last-child)::after {
            background-color: #28a745;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #5d87ff;
            box-shadow: 0 0 0 0.2rem rgba(93, 135, 255, 0.25);
        }

        .text-danger.small {
            font-size: 11px;
            margin-top: 2px;
        }

        .is-invalid {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        }

        .validation-message {
            margin-top: 2px;
        }

        .card.bg-light {
            border: 1px solid #dee2e6;
        }

        .table-sm td,
        .table-sm th {
            padding: 0.25rem;
            font-size: 0.875rem;
        }

        .btn-outline-danger {
            border-color: #dc3545;
            color: #dc3545;
        }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }

        .spinner {
            animation: spin 1s linear infinite;
            -webkit-animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @@-webkit-keyframes spin {
            0% {
                -webkit-transform: rotate(0deg);
            }

            100% {
                -webkit-transform: rotate(360deg);
            }
        }
    </style>
}

@section Scripts {
    <script type="text/javascript">
        // Variables globales
        let currentStep = 1;
        const totalSteps = 7;
        let formData = {}; // Objeto para almacenar los datos del formulario

        // Función para verificar que todo está funcionando
        console.log('Script inicializado - Verificación');

        // Asegurarse de que el script se ejecuta después de que el DOM está listo
        document.addEventListener('DOMContentLoaded', async function () {
            try {
                console.log('DOM Cargado - Inicio de configuración');

                // Cargar datos guardados
                loadStoredData();
                console.log('Datos cargados del almacenamiento');

                // Configurar el botón siguiente
                const nextBtn = document.getElementById('nextBtn');
                const prevBtn = document.getElementById('prevBtn');

                if (nextBtn) {
                    console.log('Configurando evento click para el botón siguiente');
                    nextBtn.addEventListener('click', async function (e) {
                        console.log('Click en botón siguiente - Inicio');
                        e.preventDefault();
                        try {
                            console.log('Intentando ejecutar nextStep()...');
                            await nextStep();
                            console.log('nextStep() ejecutado correctamente');
                        } catch (error) {
                            console.error('Error al ejecutar nextStep:', error);
                            alert('Error: ' + error.message);
                        }
                    });
                    console.log('Evento click configurado para el botón siguiente');
                } else {
                    console.warn('No se encontró el botón siguiente en el DOM');
                }

                if (prevBtn) {
                    console.log('Configurando evento click para el botón anterior');
                    prevBtn.addEventListener('click', function (e) {
                        e.preventDefault();
                        console.log('Click en botón anterior');
                        prevStep();
                    });
                }

                // Inicializar otros componentes si es necesario
                updateButtons();
                updateStepIndicators();

                console.log('Configuración inicial completada');
            } catch (error) {
                console.error('Error durante la inicialización:', error);
            }
            function loadStoredData() {
                const stored = localStorage.getItem('vacunacionFormData');
                if (stored) {
                    try {
                        formData = JSON.parse(stored);
                    } catch (e) {
                        formData = {};
                    }
                }
            }

            // Función para guardar los datos del paso actual
            function saveCurrentStepData() {
                const stepContainer = document.getElementById('step-container');
                if (!stepContainer) return;

                const currentStepData = {};
                const inputs = stepContainer.querySelectorAll('input, select, textarea');

                inputs.forEach(input => {
                    const key = input.name || input.id;
                    if (key) {
                        if (input.type === 'radio' || input.type === 'checkbox') {
                            if (input.checked) {
                                currentStepData[key] = input.value;
                                formData[key] = input.value; // También actualizar formData global
                            }
                        } else if (input.value && input.value.trim() !== '') {
                            currentStepData[key] = input.value;
                            formData[key] = input.value; // También actualizar formData global
                        }
                    }
                });

                // Guardar datos del paso actual
                localStorage.setItem(`stepData_${currentStep}`, JSON.stringify(currentStepData));

                // Guardar formData global actualizado
                localStorage.setItem('vacunacionFormData', JSON.stringify(formData));

                // Datos guardados exitosamente
            }

            // Función para restaurar los datos del paso actual
            function restoreCurrentStepData() {
                const stepContainer = document.getElementById('step-container');
                if (!stepContainer) return;

                // Cargar datos del paso específico
                const stepDataStr = localStorage.getItem(`stepData_${currentStep}`);
                let stepData = {};

                if (stepDataStr) {
                    try {
                        stepData = JSON.parse(stepDataStr);
                    } catch (e) {
                    }
                }

                const inputs = stepContainer.querySelectorAll('input, select, textarea');
                inputs.forEach(input => {
                    const key = input.name || input.id;

                    // Usar primero datos del paso específico, luego formData global
                    let value = stepData[key] !== undefined ? stepData[key] : formData[key];

                    if (value !== undefined && value !== null && value !== '') {
                        if (input.type === 'radio' || input.type === 'checkbox') {
                            const isVisible = input.offsetParent !== null ;
                            if (input.value === value && isVisible) {
                                input.checked = true;
                            }
                        } else {
                            input.value = value;
                        }
                    }
                });
 
            }

            // Función para ejecutar lógica específica de cada paso
            function executeStepSpecificLogic() {
                // Ejecutar función específica del paso si existe
                if (window.loadStepData && window.loadStepData[`step${currentStep}`]) {
                    try {
                        window.loadStepData[`step${currentStep}`]();
                    } catch (error) {
                        // Error silenciado intencionalmente
                    }
                }

                // Cargar datos específicos para el paso 2 (Datos Complementarios)
                if (currentStep === 2) {
                     loadDatosComplementarios().then(() => {
                        // Restaurar datos después de cargar las opciones
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                    });
                    return;
                }

                // Inicializar lógica específica para el paso 3 (Antecedentes Médicos)
                if (currentStep === 3) {
                    setTimeout(() => {
                        initializeAntecedentesLogic();
                        restoreAntecedentes();
                        // AGREGAR ESTA LÍNEA FALTANTE:
                        restoreCurrentStepData();
                    }, 100);
                    return;
                }

                // Cargar datos específicos para el paso 4 (Condición Usuario/a)
                if (currentStep === 4) {
                    loadCondicionesUsuarias().then(() => {
                        // Restaurar datos después de cargar las opciones
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                    });
                    return;
                }

                // Cargar datos específicos para el paso 5 (Médico/Cuidador)
                if (currentStep === 5) {
                    loadDatosMedicoCuidador().then(() => {
                        // Restaurar datos después de cargar las opciones
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                    });
                    return;
                }

                // Cargar datos específicos para el paso 6 (Esquema Vacunación)
                if (currentStep === 6) {
                   ListarDatosEsquemaVacunacion().then(() => {
                        // Restaurar datos después de cargar las opciones
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                    });
                    return;
                }

                // Cargar datos específicos para el paso 7 (Responsable)
                if (currentStep === 7) {
                    loadControlResponsable().then(() => {
                        // Restaurar datos después de cargar las opciones
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                    });
                    return;
                }
            }

            async function ListarDatosEsquemaVacunacion() {
                try {
                    await loadTiposCarnet();
                    await listarInsumos();
                    
                } catch (error) {
                    // Error silenciado intencionalmente
                }
            }

            async function listarInsumos() {
               try {
                   const response = await fetch('/RegistroVacunacion/GetInsumos');
                   if (!response.ok) {
                       throw new Error(`HTTP error! status: ${response.status}`);
                   }
                   const data = await response.json();

                   // Poblar el select "Vacuna"
                   populateSelect('Vacuna', data, 'Seleccione vacuna');

                   // Obtener el select por name (puede que exista con id distinto)
                   const vacunaSelect = document.querySelector('select[name="Vacuna"]');
                   if (!vacunaSelect) {
                       return;
                   }

                   // Si ya hay un valor seleccionado (por restoreCurrentStepData), cargar las dosis para esa vacuna
                   const currentVacuna = vacunaSelect.value;
                   if (currentVacuna) {
                       // Llamar a listarInsumosDosis con el id actual
                       listarInsumosDosis(currentVacuna);
                   }

                   // Agregar listener para actualizar las dosis cuando el usuario cambie la vacuna
                   // Antes de agregar, remover cualquier listener previo (defensivo) usando cloneNode
                   const newSelect = vacunaSelect.cloneNode(true);
                   vacunaSelect.parentNode.replaceChild(newSelect, vacunaSelect);

                   newSelect.addEventListener('change', function () {
                       const vacunaId = this.value;
                       onVacunaChange();
                       listarInsumosDosis(vacunaId);
                   });

            const tituloInformacion = document.getElementById('tituloInformacion');
            const contenidoInformacion = document.getElementById('contenidoInformacion');
            const alertaEdad = document.getElementById('alertaEdad');
            const mensajeAlerta = document.getElementById('mensajeAlerta');
            const dosisRecomendada = document.getElementById('dosisRecomendada');

            // Event wiring
            console.log('Configurando lógica de rangos de edad para vacunas'); 

            // Intentos de encontrar la fecha de nacimiento del paciente.
            function obtenerFechaNacimiento() {
                // 1) Input con id típico
                let el = document.querySelector('#FechaNacimiento, #fechaNacimiento, #PacienteFechaNacimiento, input[name="FechaNacimiento"], input[name="fechaNacimiento"]');
                if (el && el.value) {
                    const v = el.value.trim();
                    const d = parseDateISOOrLocal(v);
                    if (d) return d;
                }

                // 2) Data attribute en body o en un contenedor (ej. data-fecha-nacimiento="YYYY-MM-DD")
                let data = document.body.getAttribute('data-fecha-nacimiento') || document.getElementById('informacionRangosEdad')?.getAttribute('data-fecha-nacimiento');
                if (data) {
                    const d = parseDateISOOrLocal(data);
                    if (d) return d;
                }

                // 3) Global JS object: window.pacienteFechaNacimiento or window.paciente?.fechaNacimiento
                try {
                    if (window.pacienteFechaNacimiento) {
                        const d = parseDateISOOrLocal(window.pacienteFechaNacimiento);
                        if (d) return d;
                    }
                    if (window.paciente && window.paciente.fechaNacimiento) {
                        const d = parseDateISOOrLocal(window.paciente.fechaNacimiento);
                        if (d) return d;
                    }
                } catch (e) { /* ignore */ }

                return null;
            }

            // Parse flexible ISO or dd/mm/yyyy or mm/dd/yyyy (lo más robusto posible)
            function parseDateISOOrLocal(s) {
                if (!s) return null;
                // If already a Date
                if (s instanceof Date) return s;
                // ISO-like YYYY-MM-DD
                let iso = s.match(/^(\d{4})-(\d{2})-(\d{2})/);
                if (iso) {
                    const d = new Date(Number(iso[1]), Number(iso[2]) - 1, Number(iso[3]));
                    if (!isNaN(d)) return d;
                }
                // dd/mm/yyyy or dd-mm-yyyy
                let dmy = s.match(/^(\d{2})[\/\-](\d{2})[\/\-](\d{4})/);
                if (dmy) {
                    const d = new Date(Number(dmy[3]), Number(dmy[2]) - 1, Number(dmy[1]));
                    if (!isNaN(d)) return d;
                }
                // fallback to Date.parse
                const pd = new Date(s);
                if (!isNaN(pd)) return pd;
                return null;
            }

            // Devuelve { years, months, days, totalMonths, totalDays }
            function calcularEdad(fechaNacimiento, referencia = new Date()) {
                if (!fechaNacimiento) return null;
                const birth = new Date(fechaNacimiento.getFullYear(), fechaNacimiento.getMonth(), fechaNacimiento.getDate());
                const ref = new Date(referencia.getFullYear(), referencia.getMonth(), referencia.getDate());

                let years = ref.getFullYear() - birth.getFullYear();
                let months = ref.getMonth() - birth.getMonth();
                let days = ref.getDate() - birth.getDate();

                if (days < 0) {
                    months--;
                    // calcular días previos (simple ajuste)
                    const prevMonth = new Date(ref.getFullYear(), ref.getMonth(), 0);
                    days += prevMonth.getDate();
                }
                if (months < 0) {
                    years--;
                    months += 12;
                }

                const totalMonths = years * 12 + months;
                const totalDays = Math.floor((ref - birth) / (1000 * 60 * 60 * 24));

                return { years, months, days, totalMonths, totalDays };
            }

            // Intentar leer rangos desde el <option data-rangos='[...]'>
            // Formato de rango esperado:
            // [{ "texto":"1ERA DOSIS", "minMonths":12, "maxMonths":71, "textoRango":"DE 12 MESES A 5 AÑOS", "dosis":"1ERA DOSIS" }, ...]
            function parseRangosFromOption(optionEl) {
                if (!optionEl) return null;
                const attr = optionEl.getAttribute('data-rangos') || optionEl.dataset.rangos;
                if (!attr) return null;
                try {
                    return JSON.parse(attr);
                } catch (e) {
                    console.warn('No se pudo parsear data-rangos', e);
                    return null;
                }
            }

            // Si no hay data-rangos, intentar obtener de una API REST (si existe)
            async function fetchRangosApi(vacunaId) {
                if (!vacunaId) return null;
                const url = `/api/vacunas/${encodeURIComponent(vacunaId)}/rangosEdad`;
                try {
                    const res = await fetch(url, { headers: { 'Accept': 'application/json' } });
                    if (!res.ok) return null;
                    const data = await res.json();
                    return data;
                } catch (e) {
                    console.warn('fetchRangosApi fallo', e);
                    return null;
                }
            }

            // Determina si la edad (en meses) cae dentro del rango.
            // minMonths y maxMonths son inclusive si definidos. Si faltan, se asume abierto.
            function rangoAplica(rango, edadMonths) {
                if (!rango) return false;
                let min = (typeof rango.minMonths === 'number') ? rango.minMonths : -Infinity;
                let max = (typeof rango.maxMonths === 'number') ? rango.maxMonths : Infinity;
                return edadMonths >= min && edadMonths <= max;
            }

            // Renderiza la lista de rangos y devuelve los que aplican
            function renderRangos(rangos, edad) {
                contenidoInformacion.innerHTML = ''; // limpiar
                alertaEdad.style.display = 'none';
                mensajeAlerta.textContent = '';
                dosisRecomendada.textContent = '';

                const ageEl = document.createElement('div');
                ageEl.className = 'mb-2';
                if (edad) {
                    ageEl.innerHTML = `<strong>Edad del paciente:</strong> ${edad.years} años, ${edad.months} meses (${edad.totalDays} días aprox.)`;
                } else {
                    ageEl.innerHTML = `<small class="text-danger">No se ha calculado la edad del paciente. Verifique que se haya ingresado la fecha de nacimiento en el paso de Datos Básicos.</small>`;
                    contenidoInformacion.appendChild(ageEl);
                }
                contenidoInformacion.appendChild(ageEl);

                if (!rangos || !Array.isArray(rangos) || rangos.length === 0) {
                    const noData = document.createElement('div');
                    noData.className = 'small text-muted';
                    noData.textContent = 'No se encontraron rangos de edad para esta vacuna.';
                    contenidoInformacion.appendChild(noData);
                    return { aplican: [], noAplican: [] };
                }

                const list = document.createElement('div');
                list.className = 'list-group';

                const aplican = [];
                const noAplican = [];

                rangos.forEach((r) => {
                    // r espera: texto, textoRango, minMonths, maxMonths, dosis (opcional)
                    const aplica = edad ? rangoAplica(r, edad.totalMonths) : false;
                    const item = document.createElement('div');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';
                    const left = document.createElement('div');
                    left.innerHTML = `<div class="fw-bold">${r.texto || r.dosis || 'Rango'}</div><small class="text-muted">${r.textoRango || (r.minMonths !== undefined ? `${r.minMonths} meses` : '')}</small>`;
                    const badge = document.createElement('span');

                    if (aplica) {
                        badge.className = 'badge bg-success';
                        badge.textContent = 'Aplica';
                        aplica.push(r);
                    } else {
                        badge.className = 'badge bg-secondary';
                        badge.textContent = 'No aplica';
                        noAplican.push(r);
                    }

                    item.appendChild(left);
                    item.appendChild(badge);
                    list.appendChild(item);
                });

                contenidoInformacion.appendChild(list);
                return { aplican, noAplican };
            }

            function mostrarAlertaSegunRangos(resultado, rangos) {
                // Decide el mensaje y tipo de alerta
                if (!resultado || (!resultado.aplican || resultado.aplican.length === 0)) {
                    alertaEdad.className = 'alert alert-danger border-0 bg-danger-subtle';
                    mensajeAlerta.textContent = 'No hay rangos de edad que apliquen para la edad del paciente.';
                    alertaEdad.style.display = 'block';
                    // Buscar si algún rango tiene una etiqueta "dosis" para mostrar en detalle
                    const rConDosis = (rangos || []).find(r => r.dosis);
                    if (rConDosis) {
                        dosisRecomendada.textContent = `${rConDosis.dosis}: ${rConDosis.textoRango || ''} X No válido para esta edad`;
                    }
                    return;
                }

                // Si hay al menos uno que aplica, mostrar recomendación (si existe)
                alertaEdad.className = 'alert alert-warning border-0 bg-warning-subtle';
                mensajeAlerta.textContent = 'La(s) siguiente(s) dosis aplican según la edad:';
                const dosisNames = resultado.aplican.map(r => (r.dosis || r.texto || '')).filter(Boolean);
                dosisRecomendada.textContent = dosisNames.length ? dosisNames.join(', ') : '';
                alertaEdad.style.display = 'block';
            }

            // Orquestador: al cambiar la vacuna
            async function onVacunaChange() {
                console.log('Vacuna cambiada, actualizando información de rangos de edad');
                const opt = vacunaSelect && vacunaSelect.selectedOptions && vacunaSelect.selectedOptions[0];
                const vacunaNombre = opt ? (opt.textContent || opt.value) : '';
                const vacunaId = opt ? (opt.value) : '';

                tituloInformacion.textContent = `Información de rangos de edad para ${vacunaNombre || ''}`;

                // obtener fecha de nacimiento -> edad
                const fechaNac = obtenerFechaNacimiento();
                const edad = fechaNac ? calcularEdad(fechaNac) : null;

                // obtener rangos: primero del option, luego intentar fetch
                let rangos = parseRangosFromOption(opt);
                if (!rangos) {
                    rangos = await fetchRangosApi(vacunaId);
                }

                // render
                const resultado = renderRangos(rangos, edad);
                mostrarAlertaSegunRangos(resultado, rangos);
            }


               } catch (error) {
                   // Error silenciado intencionalmente
                   console.error('Error en listarInsumos:', error);
               }
            }

            function listarInsumosDosis(vacunaId) {
                const dosisSelect = document.querySelector('select[name="Dosis"]');
                if (!dosisSelect) return;
                console.log('Cargando dosis para vacunaId:', vacunaId);

                // Limpiar opciones existentes excepto la primera
                while (dosisSelect.children.length > 1) {
                    dosisSelect.removeChild(dosisSelect.lastChild);
                }
                console.log('Opciones de dosis limpiadas');
                if (!vacunaId) return;
                console.log('VacunaId válido, procediendo a cargar dosis');
                // Obtener fecha de nacimiento: preferir lo guardado en formData/localStorage, si existe
                let fechaNacimiento = null;

                try {
                     // 1) Usar la variable in-memory 'formData' si existe y tiene la propiedad
                    if (typeof formData !== 'undefined' && formData) {
                        if (formData.FechaNacimiento) fechaNacimiento = formData.FechaNacimiento;
                        else if (formData.fechaNacimiento) fechaNacimiento = formData.fechaNacimiento;
                    }
                    // 2) Intentar stepData_1 (datos guardados por paso)
                    if (!fechaNacimiento) {
                        const step1 = localStorage.getItem('stepData_1');
                        if (step1) {
                            try {
                                const parsed = JSON.parse(step1);
                                fechaNacimiento = parsed.FechaNacimiento || parsed.fechaNacimiento || fechaNacimiento;
                            } catch { /* ignore */ }
                        }
                    }
                    // 3) Intentar el objeto global 'vacunacionFormData'
                    if (!fechaNacimiento) {
                        const stored = localStorage.getItem('vacunacionFormData');
                        if (stored) {
                            try {
                                const parsed = JSON.parse(stored);
                                fechaNacimiento = parsed.FechaNacimiento || parsed.fechaNacimiento || fechaNacimiento;
                            } catch { /* ignore */ }
                        }
                    }
                    // 4) Intentar leer directamente del input (por si el paso 1 está en DOM)
                    if (!fechaNacimiento) {
                        const fechaInput = document.querySelector('input[name="FechaNacimiento"], input[id="FechaNacimiento"], input[name="fechaNacimiento"]');
                        if (fechaInput && fechaInput.value) fechaNacimiento = fechaInput.value;
                    }
                    // Normalizar formatos: convertir dd/mm/yyyy -> yyyy-mm-dd
                    if (fechaNacimiento && /^\d{2}\/\d{2}\/\d{4}$/.test(fechaNacimiento)) {
                        const parts = fechaNacimiento.split('/');
                        fechaNacimiento = `${parts[2]}-${parts[1].padStart(2,'0')}-${parts[0].padStart(2,'0')}`; // yyyy-mm-dd
                    } 
                    if (!fechaNacimiento) {
                        console.warn('Fecha de nacimiento no encontrada en localStorage/variables/DOM. No se filtrarán las dosis por edad.');
                        return; // o hacer fetch sin fecha si prefieres
                    }

                    const url = `/RegistroVacunacion/GetDosisByVacuna?vacunaId=${encodeURIComponent(vacunaId)}&fechaNacimiento=${encodeURIComponent(fechaNacimiento)}`;
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data && !data.error && Array.isArray(data)) {
                                data.forEach(item => {
                                    const option = document.createElement('option');
                                    option.value = item.value;
                                    option.textContent = item.text;
                                    dosisSelect.appendChild(option);
                                });
                            } else {
                                // Si el backend devuelve { error: ... } y quieres fallback, puedes llamar sin fecha aquí
                                if (data && data.error) {
                                    console.warn('GetDosisByVacuna error:', data.error);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error al cargar dosis:', error);
                        });

                } catch (err) {
                    console.error('Error preparando petición de dosis:', err);
                }
            }

            async function loadControlResponsable() {
                try {
                    // Cargar Centros de Atención
                    const centrosResponse = await fetch('/RegistroVacunacion/GetCentrosAtencion');
                    if (centrosResponse.ok) {
                        const centros = await centrosResponse.json();
                        populateSelect('CentroSaludResponsable', centros, 'Seleccione Centro de Salud');
                    }
                } catch (error) {
                    // Error silenciado intencionalmente
                }
            }

            // Función para cargar datos de los dropdowns del paso 2
            async function loadDatosComplementarios() {
                try {
                    // Cargar Aseguradoras
                    const aseguradorasResponse = await fetch('/RegistroVacunacion/GetAseguradoras');
                    if (aseguradorasResponse.ok) {
                        const aseguradoras = await aseguradorasResponse.json();
                        populateSelect('AseguradoraId', aseguradoras, 'Seleccione aseguradora');
                    }

                    // Cargar Regímenes de Afiliación
                    const regimenesResponse = await fetch('/RegistroVacunacion/GetRegimenesAfiliacion');
                    if (regimenesResponse.ok) {
                        const regimenes = await regimenesResponse.json();
                        populateSelect('RegimenAfiliacionId', regimenes, 'Seleccione régimen');
                    }

                    // Cargar Pertenencias Étnicas
                    const pertenenciasResponse = await fetch('/RegistroVacunacion/GetPertenenciasEtnicas');
                    if (pertenenciasResponse.ok) {
                        const pertenencias = await pertenenciasResponse.json();
                        populateSelect('PertenenciaEtnicaId', pertenencias, 'Seleccione pertenencia étnica');
                    }

                    // Cargar Centros de Atención
                    const centrosResponse = await fetch('/RegistroVacunacion/GetCentrosAtencion');
                    if (centrosResponse.ok) {
                        const centros = await centrosResponse.json();
                        populateSelect('CentroAtencionId', centros, 'Seleccione Centro de Salud');
                        populateSelect('LugardeParto', centros, 'Seleccione Lugar de Parto');
                    }

                } catch (error) {
                    // Error silenciado intencionalmente
                }
            }

            // Función para llenar un select con datos
            function populateSelect(selectName, data, defaultText) {
                const select = document.querySelector(`select[name="${selectName}"]`);
                if (select && data && !data.error && Array.isArray(data)) {
                    // Limpiar opciones existentes excepto la primera
                    while (select.children.length > 1) {
                        select.removeChild(select.lastChild);
                    }

                    // Actualizar texto de la opción por defecto
                    if (select.children.length > 0) {
                        select.children[0].textContent = defaultText;
                    }

                    // Agregar nuevas opciones
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.value;
                        option.textContent = item.text;
                        select.appendChild(option);
                    });
                }
            }

            // Función para limpiar los datos guardados
            function clearStoredData() {
                formData = {};
                localStorage.removeItem('vacunacionFormData');
            }
  
            // Hacer las funciones globalmente accesibles
            window.saveCurrentStepData = saveCurrentStepData;
            window.restoreCurrentStepData = restoreCurrentStepData;
            window.clearStoredData = clearStoredData;

            // Define functions first
            async function nextStep() {
                console.log('Iniciando nextStep - Paso actual:', currentStep);

                // Guardar los datos del paso actual
                saveCurrentStepData();

                // Validar el paso actual antes de continuar
                if (currentStep === 1) {
                    console.log('Validando paso 1...');
                    // Validar datos básicos
                    if (typeof window.validateDatosBasicos === 'function') {
                        console.log('Función validateDatosBasicos encontrada');
                        if (!window.validateDatosBasicos()) {
                            console.log('Validación del paso 1 falló');
                            return; // No continuar si la validación falla
                        }
                    } else {
                        console.log('ADVERTENCIA: Función validateDatosBasicos no encontrada');
                    }
                } else if (currentStep === 6) {
                    // Validar esquema de vacunación
                    if (typeof window.validateEsquemaVacunacion === 'function') {
                        if (!window.validateEsquemaVacunacion()) {
                            return; // No continuar si la validación falla
                        }
                    }
                }

                if (currentStep < totalSteps) {
                    console.log('Avanzando al siguiente paso...');
                    currentStep++;

                    try {
                        const url = '/RegistroVacunacion/LoadStep?step=' + currentStep;
                        console.log('Cargando paso desde:', url);

                        const response = await fetch(url);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const html = await response.text();
                        console.log('Contenido HTML recibido:', html.substring(0, 100) + '...');

                        const stepContainer = document.getElementById('step-container');
                        if (stepContainer) {
                            stepContainer.innerHTML = html;
                            console.log('Contenido actualizado en el contenedor');

                            // Restaurar los datos después de cargar el nuevo contenido
                            executeStepSpecificLogic();

                            updateButtons();
                            updateStepIndicators();
                            console.log('UI actualizada para el paso', currentStep);
                        } else {
                            console.error('Error: No se encontró el contenedor step-container');
                            alert('Error: No se encontró el contenedor para mostrar el siguiente paso');
                        }
                    } catch (error) {
                        console.error('Error al cargar el siguiente paso:', error);
                        alert('Error al cargar el paso: ' + error.message);
                    }
                }
            }

            function prevStep() {
                if (currentStep > 1) {
                    // Guardar los datos del paso actual
                    saveCurrentStepData();

                    currentStep--;

                    fetch('/RegistroVacunacion/LoadStep?step=' + currentStep)
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('step-container').innerHTML = html;

                            // Restaurar los datos después de cargar el nuevo contenido
                            executeStepSpecificLogic();

                            updateButtons();
                            updateStepIndicators();
                        });
                }
            }

            function updateButtons() {
                const prevBtn = document.getElementById('prevBtn');
                const nextBtn = document.getElementById('nextBtn');
                const submitBtn = document.getElementById('submitBtn');

                if (prevBtn) {
                    prevBtn.style.display = currentStep === 1 ? 'none' : 'inline-block';
                }

                if (currentStep === totalSteps) {
                    if (nextBtn) nextBtn.style.display = 'none';
                    if (submitBtn) submitBtn.style.display = 'inline-block';
                } else {
                    if (nextBtn) nextBtn.style.display = 'inline-block';
                    if (submitBtn) submitBtn.style.display = 'none';
                }
            }

            function updateStepIndicators() {
                document.querySelectorAll('.step-indicator').forEach((indicator, index) => {
                    const stepNumber = index + 1;

                    if (stepNumber < currentStep) {
                        indicator.classList.add('completed');
                        indicator.classList.remove('active');
                    } else if (stepNumber === currentStep) {
                        indicator.classList.add('active');
                        indicator.classList.remove('completed');
                    } else {
                        indicator.classList.remove('active', 'completed');
                    }
                });

                const badge = document.querySelector('.badge');
                if (badge) {
                    badge.textContent = `Paso ${currentStep} de ${totalSteps}`;
                }
            }

            // Función para manejar antecedentes médicos
            function initializeAntecedentesLogic() {
                const agregarBtn = document.getElementById('agregarAntecedenteBtn');
                if (agregarBtn) {
                    agregarBtn.addEventListener('click', function () {
                        agregarAntecedente();
                    });
                }
            }

            function agregarAntecedente() {
                // Obtener valores del formulario
                const fecha = document.querySelector('input[name="FechaRegistroAntecedente"]')?.value;
                const tipo = document.querySelector('input[name="TipoAntecedente"]')?.value;
                const descripcion = document.querySelector('textarea[name="DescripcionAntecedente"]')?.value;
                const observaciones = document.querySelector('textarea[name="ObservacionesAntecedente"]')?.value;

                // Validar campos requeridos
                if (!fecha || !tipo || !descripcion) {
                    alert('Por favor complete todos los campos obligatorios (Fecha, Tipo y Descripción)');
                    return;
                }

                // Validar formato de fecha (para input type="date" el formato es yyyy-mm-dd)
                if (!Date.parse(fecha)) {
                    alert('Por favor seleccione una fecha válida');
                    return;
                }

                // Formatear la fecha para mostrar en formato más legible
                const fechaFormateada = new Date(fecha).toLocaleDateString('es-ES', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit'
                });

                // Crear el antecedente
                const antecedente = {
                    fecha: fecha, // Guardar fecha original
                    fechaFormateada: fechaFormateada, // Fecha formateada para mostrar
                    tipo: tipo,
                    descripcion: descripcion,
                    observaciones: observaciones || 'N/A'
                };

                // Agregar a la lista
                const tableBody = document.getElementById('antecedentesTableBody');
                const listaContainer = document.getElementById('listaAntecedentes');

                if (tableBody && listaContainer) {
                    // Mostrar la tabla si está oculta
                    listaContainer.style.display = 'block';

                    // Crear fila de la tabla
                    const row = document.createElement('tr');
                    row.innerHTML = `
                            <td>${antecedente.fechaFormateada}</td>
                            <td>${antecedente.tipo}</td>
                            <td>${antecedente.descripcion}</td>
                            <td>${antecedente.observaciones}</td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" onclick="eliminarAntecedente(this)">
                                    <i class="ri-delete-bin-line"></i>
                                </button>
                            </td>
                        `;

                    tableBody.appendChild(row);

                    // Limpiar el formulario
                    document.querySelector('input[name="FechaRegistroAntecedente"]').value = '';
                    document.querySelector('input[name="TipoAntecedente"]').value = '';
                    document.querySelector('textarea[name="DescripcionAntecedente"]').value = '';
                    document.querySelector('textarea[name="ObservacionesAntecedente"]').value = '';

                    // Guardar en formData
                    if (!formData.antecedentes) {
                        formData.antecedentes = [];
                    }
                    formData.antecedentes.push(antecedente);
                    localStorage.setItem('vacunacionFormData', JSON.stringify(formData));

                    // Antecedente procesado exitosamente
                }
            }

            function eliminarAntecedente(button) {
                if (confirm('¿Está seguro de que desea eliminar este antecedente?')) {
                    const row = button.closest('tr');
                    const index = Array.from(row.parentNode.children).indexOf(row);

                    // Eliminar de la tabla
                    row.remove();

                    // Eliminar de formData
                    if (formData.antecedentes && formData.antecedentes.length > index) {
                        formData.antecedentes.splice(index, 1);
                        localStorage.setItem('vacunacionFormData', JSON.stringify(formData));
                    }

                    // Ocultar la tabla si no hay más antecedentes
                    const tableBody = document.getElementById('antecedentesTableBody');
                    const listaContainer = document.getElementById('listaAntecedentes');
                    if (tableBody && tableBody.children.length === 0 && listaContainer) {
                        listaContainer.style.display = 'none';
                    }
                }
            }

            // Función para restaurar antecedentes guardados
            function restoreAntecedentes() {
                if (formData.antecedentes && formData.antecedentes.length > 0) {
                    const tableBody = document.getElementById('antecedentesTableBody');
                    const listaContainer = document.getElementById('listaAntecedentes');

                    if (tableBody && listaContainer) {
                        // Limpiar tabla existente
                        tableBody.innerHTML = '';

                        // Mostrar la tabla
                        listaContainer.style.display = 'block';

                        // Agregar cada antecedente
                        formData.antecedentes.forEach(antecedente => {
                            // Si no tiene fechaFormateada (datos anteriores), formatearla
                            const fechaMostrar = antecedente.fechaFormateada ||
                                new Date(antecedente.fecha).toLocaleDateString('es-ES', {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit'
                                });

                            const row = document.createElement('tr');
                            row.innerHTML = `
                                    <td>${fechaMostrar}</td>
                                    <td>${antecedente.tipo}</td>
                                    <td>${antecedente.descripcion}</td>
                                    <td>${antecedente.observaciones}</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="eliminarAntecedente(this)">
                                            <i class="ri-delete-bin-line"></i>
                                        </button>
                                    </td>
                                `;
                            tableBody.appendChild(row);
                        });
                    }
                }
            }

            // Función para cargar condiciones usuarias en el paso 4
            async function loadCondicionesUsuarias() {
                fetch('@Url.Action("GetCondicionesUsuarias", "RegistroVacunacion")')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {

                        const select = document.getElementById('condicionUsuariaSelect');
                        if (!select) {
                            return;
                        }

                        const currentValue = select.value; // Preservar valor actual

                        if (data.error) {
                            return;
                        }

                        // Limpiar opciones existentes (excepto la primera)
                        select.innerHTML = '<option value="">Seleccionar...</option>';

                        // Agregar las opciones de condiciones usuarias
                        if (Array.isArray(data) && data.length > 0) {
                            data.forEach(condicion => {
                                const option = document.createElement('option');
                                option.value = condicion.value;
                                option.textContent = condicion.text;

                                // Mantener la selección si existía
                                if (condicion.value == currentValue) {
                                    option.selected = true;
                                }

                                select.appendChild(option);
                            });
                            // Options added successfully
                        }
                    })
                    .catch(error => {
                        // Error handled silently
                    });
            }

            // Función para cargar datos de médico/cuidador en el paso 5
            async function loadDatosMedicoCuidador() {
                try {
                    console.log('Cargando datos de médico/cuidador...');

                    // Cargar Regímenes de Afiliación para la madre
                    const regimenesResponse = await fetch('/RegistroVacunacion/GetRegimenesAfiliacion');
                    if (regimenesResponse.ok) {
                        const regimenes = await regimenesResponse.json(); 
                        populateSelectById('RegimenCuidador', regimenes, 'Seleccione régimen');
                    }

                    // Cargar Pertenencias Étnicas para la madre y cuidador
                    const pertenenciasResponse = await fetch('/RegistroVacunacion/GetPertenenciasEtnicas');
                    if (pertenenciasResponse.ok) {
                        const pertenencias = await pertenenciasResponse.json();
                        populateSelectById('EtniaCuidador', pertenencias, 'Seleccione pertenencia étnica');
                    }

                    console.log('Datos de médico/cuidador cargados exitosamente');
                } catch (error) {
                    console.error('Error al cargar datos de médico/cuidador:', error);
                }
            }

            // Función para llenar un select por ID con datos
            function populateSelectById(selectId, data, defaultText) {
                const select = document.getElementById(selectId);
                if (select && data && !data.error && Array.isArray(data)) {
                    // Preservar valor actual
                    const currentValue = select.value;

                    // Limpiar opciones existentes excepto la primera
                    while (select.children.length > 1) {
                        select.removeChild(select.lastChild);
                    }

                    // Actualizar texto de la opción por defecto
                    if (select.children.length > 0) {
                        select.children[0].textContent = defaultText;
                    }

                    // Agregar nuevas opciones
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.value;
                        option.textContent = item.text;

                        // Mantener la selección si existía
                        if (item.value == currentValue) {
                            option.selected = true;
                        }

                        select.appendChild(option);
                    });

                    // Select populated successfully
                } else if (data && data.error) {
                    // Error handled silently
                }
            }

            // Función para cargar tipos de carnet en el paso 6
            async function loadTiposCarnet() {
                try {
                    console.log('Cargando tipos de carnet...');

                    const response = await fetch('/RegistroVacunacion/GetTiposCarnet');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data.error) {
                        console.error('Error al cargar tipos de carnet:', data.error);
                        return;
                    }

                    // Buscar el select de tipo de carnet
                    const select = document.getElementById('tipoCarnet');
                    if (!select) {
                        console.error('Select tipoCarnet no encontrado');
                        return;
                    }

                    // Ocultar indicador de carga si existe
                    const loading = document.getElementById('tipoCarnetLoading');
                    if (loading) {
                        loading.style.display = 'none';
                    }

                    // Preservar valor actual
                    const currentValue = select.value;

                    // Limpiar opciones existentes excepto la primera
                    select.innerHTML = '<option value="">Seleccione tipo de carnét</option>';

                    // Agregar las opciones desde la base de datos
                    if (Array.isArray(data) && data.length > 0) {
                        data.forEach(tipoCarnet => {
                            const option = document.createElement('option');
                            option.value = tipoCarnet.value;
                            option.textContent = tipoCarnet.text;
                            option.setAttribute('data-codigo', tipoCarnet.codigo);

                            // Mantener la selección si existía
                            if (tipoCarnet.value == currentValue) {
                                option.selected = true;
                            }

                            select.appendChild(option);
                        });
                        console.log(`Tipos de carnet cargados: ${data.length} opciones`);
                    } else {
                        console.warn('No se recibieron tipos de carnet');
                    }

                } catch (error) {
                    console.error('Error al cargar tipos de carnet:', error);

                    // Mostrar error en el select
                    const select = document.getElementById('tipoCarnet');
                    if (select) {
                        select.innerHTML = '<option value="">Error al cargar tipos de carnet</option>';
                    }

                    // Ocultar indicador de carga
                    const loading = document.getElementById('tipoCarnetLoading');
                    if (loading) {
                        loading.style.display = 'none';
                    }
                }
            }

            // Función para validar datos básicos
            window.validateDatosBasicos = function () {
                console.log('Iniciando validación de datos básicos');
                const requiredFields = {
                    'NumeroDocumento': 'Número de Identificación',
                    'PrimerNombre': 'Primer Nombre',
                    'PrimerApellido': 'Primer Apellido',
                    'FechaNacimiento': 'Fecha de Nacimiento'
                };

                let isValid = true;
                let missingFields = [];

                // Primero limpiar todas las clases is-invalid de los campos
                Object.keys(requiredFields).forEach(fieldId => {
                    const field = document.getElementById(fieldId);
                    if (field) {
                        field.classList.remove('is-invalid');
                    }
                });

                for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
                    const field = document.getElementById(fieldId);
                    console.log(`Validando campo ${fieldId}`);
                    if (!field || !field.value.trim()) {
                        console.log(`Campo ${fieldId} está vacío o no existe`);
                        isValid = false;
                        missingFields.push(fieldName);
                        if (field) {
                            field.classList.add('is-invalid');
                        }
                    } else {
                        console.log(`Campo ${fieldId} es válido: ${field.value}`);
                    }
                }

                if (!isValid) {
                    console.log('Validación falló. Campos faltantes:', missingFields);
                } else {
                    console.log('Todos los campos requeridos están completos');
                }

                return isValid;
            };

            // Hacer las funciones globalmente accesibles
            window.eliminarAntecedente = eliminarAntecedente;


            // Restaurar datos del paso inicial si existen
            setTimeout(() => {
                restoreCurrentStepData();
            }, 100);

            // Agregar listeners para guardar datos automáticamente cuando cambian
            const stepContainer = document.getElementById('step-container');
            if (stepContainer) {
                stepContainer.addEventListener('change', function (e) {
                    if (e.target.matches('input, select, textarea')) {
                        saveCurrentStepData();
                    }
                });

                stepContainer.addEventListener('input', function (e) {
                    if (e.target.matches('input, textarea')) {
                        saveCurrentStepData();
                    }
                });
            }

            // Agregar listener al formulario para manejar el envío
            console.log('Configurando listener de envío del formulario...');
            const form = document.getElementById('vacunacionForm');
            if (form) {
                console.log('Configurando listener de envío del formulario.entro..');
                form.addEventListener('submit', function (e) {
                    e.preventDefault();

                    // Guardar datos del paso actual
                    saveCurrentStepData();

                    // Recopilar todos los datos
                    const todosLosDatos = {};
                    for (let step = 1; step <= totalSteps; step++) {
                        const stepData = localStorage.getItem(`stepData_${step}`);
                        if (stepData) {
                            try {
                                const parsedData = JSON.parse(stepData);

                                // Convertir posibles valores de texto a booleanos reales
                                for (const [key, value] of Object.entries(parsedData)) {
                                    if (typeof value === "string") {
                                        const lowerValue = value.trim().toLowerCase();

                                        if (["true", "si", "sí", "on"].includes(lowerValue)) {
                                            parsedData[key] = true;
                                        } else if (["false", "no"].includes(lowerValue)) {
                                            parsedData[key] = false;
                                        }
                                    }
                                }

                                Object.assign(todosLosDatos, parsedData);
                            } catch (e) {
                                console.error(`Error al parsear datos del paso ${step}:`, e);
                            }
                        }
                    }

                    // Obtener los antecedentes de formData y agregarlos al objeto de envío
                    const formDataStr = localStorage.getItem('vacunacionFormData');
                    if (formDataStr) {
                        try {
                            const formDataObj = JSON.parse(formDataStr);
                            if (formDataObj.antecedentes && formDataObj.antecedentes.length > 0) {
                                // Convertir los antecedentes a un formato que el servidor pueda procesar
                                const antecedentesParaEnviar = formDataObj.antecedentes.map(ant => ({
                                    FechaRegistro: ant.fecha, // Usar la fecha original (yyyy-mm-dd)
                                    Tipo: ant.tipo,
                                    Descripcion: ant.descripcion,
                                    Observaciones: ant.observaciones === 'N/A' ? null : ant.observaciones,
                                    Activo: true
                                }));
                                
                                // Agregar al objeto que se enviará al servidor
                                todosLosDatos.ArrayAntecedentes = JSON.stringify(antecedentesParaEnviar);
                                
                                console.log('Antecedentes agregados al envío:', antecedentesParaEnviar);
                            }
                        } catch (e) {
                            console.error('Error al procesar antecedentes:', e);
                        }
                    }


                    // Enviar via AJAX
                    const submitBtn = document.getElementById('submitBtn');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<i class="ri-loader-2-line spinner me-1"></i> Guardando...';
                    }

                    fetch('/RegistroVacunacion/GuardarRegistroCompleto', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(todosLosDatos)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Limpiar localStorage
                                @* for (let step = 1; step <= totalSteps; step++) {
                                    localStorage.removeItem(`stepData_${step}`);
                                }
                                localStorage.removeItem('vacunacionFormData'); *@

                                    alert('Registro guardado correctamente');
                                window.location.href = '/RegistroVacunacion/Index';
                            } else {
                                alert('Error: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error al guardar el registro');
                        })
                        .finally(() => {
                            if (submitBtn) {
                                submitBtn.disabled = false;
                                submitBtn.innerHTML = '<i class="ri-save-line me-1"></i> Guardar Registro';
                            }
                        });
                });
            } 

            
            
        })
    </script>
}
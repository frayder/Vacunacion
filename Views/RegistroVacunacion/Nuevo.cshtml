@model RegistroVacunacionItemViewModel
@{
    ViewData["Title"] = "Nuevo Registro de Vacunación";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
} 
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0 text-white">
                    <i class="ri-vaccine-line me-2"></i>Formulario por Pasos
                </h5>
                <p class="mb-0 text-white-50">Complete la información de paciente paso a paso</p>
            </div>
            <div class="card-body">
                <!-- Progress Steps -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="badge bg-primary text-white px-3 py-2">Paso 1 de 7</span>
                    </div>
                    
                    <!-- Step indicators -->
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="step-indicator active" data-step="1">
                            <div class="step-circle bg-primary text-white">1</div>
                            <span class="step-label">Datos Básicos</span>
                        </div>
                        <div class="step-indicator" data-step="2">
                            <div class="step-circle">2</div>
                            <span class="step-label">Datos Complementarios</span>
                        </div>
                        <div class="step-indicator" data-step="3">
                            <div class="step-circle">3</div>
                            <span class="step-label">Antecedentes Médicos</span>
                        </div>
                        <div class="step-indicator" data-step="4">
                            <div class="step-circle">4</div>
                            <span class="step-label">Condición Usuario</span>
                        </div>
                        <div class="step-indicator" data-step="5">
                            <div class="step-circle">5</div>
                            <span class="step-label">Médico/Cuidador</span>
                        </div>
                        <div class="step-indicator" data-step="6">
                            <div class="step-circle">6</div>
                            <span class="step-label">Esquema Vacunación</span>
                        </div>
                        <div class="step-indicator" data-step="7">
                            <div class="step-circle">7</div>
                            <span class="step-label">Responsable</span>
                        </div>
                    </div>
                </div>

                <form asp-action="Nuevo" method="post" id="vacunacionForm">
                    <!-- Hidden fields for model binding -->
                    <input type="hidden" asp-for="Paciente" />
                    
                    <!-- Dynamic Step Container -->
                    <div id="step-container">
                        <!-- Steps will be loaded here dynamically -->
                        <partial name="Steps/_DatosBasicos" model="Model" />
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="d-flex justify-content-between mt-4">
                        <button type="button" class="btn btn-secondary" id="prevBtn" style="display: none;">
                            <i class="ri-arrow-left-line me-1"></i> Anterior
                        </button>
                        <div class="ms-auto">
                            <button type="button" class="btn btn-primary" id="nextBtn">
                                Siguiente <i class="ri-arrow-right-line ms-1"></i>
                            </button>
                            <button type="submit" class="btn btn-success" id="submitBtn" style="display: none;">
                                <i class="ri-save-line me-1"></i> Guardar Registro
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .step-indicator {
            text-align: center;
            flex: 1;
            position: relative;
        }
        
        .step-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .step-indicator.active .step-circle {
            background-color: #5d87ff;
            border-color: #5d87ff;
            color: white;
        }
        
        .step-indicator.completed .step-circle {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }
        
        .step-label {
            font-size: 12px;
            color: #6c757d;
            display: block;
        }
        
        .step-indicator.active .step-label {
            color: #5d87ff;
            font-weight: 600;
        }
        
        .step-content {
            display: none;
        }
        
        .step-content.active {
            display: block;
        }
        
        .step-indicator:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 20px;
            right: -50%;
            left: 50%;
            height: 2px;
            background-color: #dee2e6;
            z-index: -1;
        }
        
        .step-indicator.completed:not(:last-child)::after {
            background-color: #28a745;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #5d87ff;
            box-shadow: 0 0 0 0.2rem rgba(93, 135, 255, 0.25);
        }
        
        .text-danger.small {
            font-size: 11px;
            margin-top: 2px;
        }
        
        .is-invalid {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        }
        
        .validation-message {
            margin-top: 2px;
        }
        
        .card.bg-light {
            border: 1px solid #dee2e6;
        }
        
        .table-sm td, .table-sm th {
            padding: 0.25rem;
            font-size: 0.875rem;
        }
        
        .btn-outline-danger {
            border-color: #dc3545;
            color: #dc3545;
        }
        
        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }
    </style>
}

@section Scripts {
    <script> 
        let currentStep = 1;
        const totalSteps = 7;
        let formData = {}; // Objeto para almacenar los datos del formulario
        
        // Cargar datos guardados del localStorage al inicializar
        function loadStoredData() {
            const stored = localStorage.getItem('vacunacionFormData');
            if (stored) {
                try {
                    formData = JSON.parse(stored);
                } catch (e) {
                    formData = {};
                }
            }
        }

        // Función para guardar los datos del paso actual
        function saveCurrentStepData() {
            const stepContainer = document.getElementById('step-container');
            if (!stepContainer) return;

            const inputs = stepContainer.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                if (input.type === 'radio' || input.type === 'checkbox') {
                    if (input.checked) {
                        formData[input.name] = input.value;
                    }
                } else {
                    formData[input.name || input.id] = input.value;
                }
            });
            
            // Guardar en localStorage
            localStorage.setItem('vacunacionFormData', JSON.stringify(formData));
        }

        // Función para restaurar los datos del paso actual
        function restoreCurrentStepData() {
            const stepContainer = document.getElementById('step-container');
            if (!stepContainer) return;

            const inputs = stepContainer.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                const key = input.name || input.id;
                if (formData[key] !== undefined) {
                    if (input.type === 'radio' || input.type === 'checkbox') {
                        input.checked = (input.value === formData[key]);
                    } else {
                        input.value = formData[key];
                    }
                }
            });

            // Ejecutar lógica específica del paso actual
            executeStepSpecificLogic();
        }

        // Función para ejecutar lógica específica de cada paso
        function executeStepSpecificLogic() {
            // Ejecutar función específica del paso si existe
            if (window.loadStepData && window.loadStepData[`step${currentStep}`]) {
                try {
                    window.loadStepData[`step${currentStep}`]();
                } catch (error) {
                    console.error(`Error ejecutando lógica del paso ${currentStep}:`, error);
                }
            }

            // Cargar datos específicos para el paso 2 (Datos Complementarios)
            if (currentStep === 2) {
                loadDatosComplementarios();
            }
        }

        // Función para cargar datos de los dropdowns del paso 2
        async function loadDatosComplementarios() {
            try {
                console.log('Cargando datos complementarios...');
                
                // Cargar Aseguradoras
                const aseguradorasResponse = await fetch('/RegistroVacunacion/GetAseguradoras');
                if (aseguradorasResponse.ok) {
                    const aseguradoras = await aseguradorasResponse.json();
                    populateSelect('Aseguradora', aseguradoras, 'Seleccione aseguradora');
                }

                // Cargar Regímenes de Afiliación
                const regimenesResponse = await fetch('/RegistroVacunacion/GetRegimenesAfiliacion');
                if (regimenesResponse.ok) {
                    const regimenes = await regimenesResponse.json();
                    populateSelect('RegimenAfiliacion', regimenes, 'Seleccione régimen');
                }

                // Cargar Pertenencias Étnicas
                const pertenenciasResponse = await fetch('/RegistroVacunacion/GetPertenenciasEtnicas');
                if (pertenenciasResponse.ok) {
                    const pertenencias = await pertenenciasResponse.json();
                    populateSelect('PertenenciaEtnica', pertenencias, 'Seleccione pertenencia étnica');
                }

                // Cargar Centros de Atención
                const centrosResponse = await fetch('/RegistroVacunacion/GetCentrosAtencion');
                if (centrosResponse.ok) {
                    const centros = await centrosResponse.json();
                    populateSelect('CentroSalud', centros, 'Sistema Central');
                }

                console.log('Datos complementarios cargados exitosamente');
            } catch (error) {
                console.error('Error al cargar datos complementarios:', error);
            }
        }

        // Función para llenar un select con datos
        function populateSelect(selectName, data, defaultText) {
            const select = document.querySelector(`select[name="${selectName}"]`);
            if (select && data && !data.error && Array.isArray(data)) {
                // Limpiar opciones existentes excepto la primera
                while (select.children.length > 1) {
                    select.removeChild(select.lastChild);
                }
                
                // Actualizar texto de la opción por defecto
                if (select.children.length > 0) {
                    select.children[0].textContent = defaultText;
                }

                // Agregar nuevas opciones
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.value;
                    option.textContent = item.text;
                    select.appendChild(option);
                });
                
                console.log(`Select ${selectName} poblado con ${data.length} opciones`);
            } else if (data && data.error) {
                console.error(`Error al cargar ${selectName}:`, data.error);
            } else {
                console.warn(`No se pudo poblar el select ${selectName}:`, { select, data });
            }
        }
        
        // Función para limpiar los datos guardados
        function clearStoredData() {
            formData = {};
            localStorage.removeItem('vacunacionFormData');
        }
        
        // Hacer las funciones globalmente accesibles
        window.saveCurrentStepData = saveCurrentStepData;
        window.restoreCurrentStepData = restoreCurrentStepData;
        window.clearStoredData = clearStoredData;

        // Define functions first
        async function nextStep() {
            // Guardar los datos del paso actual
            saveCurrentStepData();
            
            // Validar el paso actual antes de continuar
            if (currentStep === 1) {
                // Validar datos básicos
                if (typeof window.validateDatosBasicos === 'function') {
                    if (!window.validateDatosBasicos()) {
                        return; // No continuar si la validación falla
                    }
                }
            }
            
            if (currentStep < totalSteps) {
                currentStep++;
                try {
                    const url = '/RegistroVacunacion/LoadStep?step=' + currentStep;
                    const response = await fetch(url);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const html = await response.text(); 
                    
                    const stepContainer = document.getElementById('step-container');
                    if (stepContainer) {
                        stepContainer.innerHTML = html; 
                        
                        // Restaurar los datos después de cargar el nuevo contenido
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                        
                        updateButtons();
                        updateStepIndicators();
                    } else {
                        console.error('step-container element not found!');
                    }
                } catch (error) { 
                    alert('Error al cargar el paso: ' + error.message);
                }
            }
        }
        
        function prevStep() { 
            if (currentStep > 1) {
                // Guardar los datos del paso actual
                saveCurrentStepData();
                
                currentStep--; 
                
                fetch('/RegistroVacunacion/LoadStep?step=' + currentStep)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('step-container').innerHTML = html;
                        
                        // Restaurar los datos después de cargar el nuevo contenido
                        setTimeout(() => {
                            restoreCurrentStepData();
                        }, 100);
                        
                        updateButtons();
                        updateStepIndicators();
                    });
            }
        }
        
        function updateButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');

            if (prevBtn) {
                prevBtn.style.display = currentStep === 1 ? 'none' : 'inline-block';
            }

            if (currentStep === totalSteps) {
                if (nextBtn) nextBtn.style.display = 'none';
                if (submitBtn) submitBtn.style.display = 'inline-block';
            } else {
                if (nextBtn) nextBtn.style.display = 'inline-block';
                if (submitBtn) submitBtn.style.display = 'none';
            }
        }
        
        function updateStepIndicators() {
            document.querySelectorAll('.step-indicator').forEach((indicator, index) => {
                const stepNumber = index + 1;

                if (stepNumber < currentStep) {
                    indicator.classList.add('completed');
                    indicator.classList.remove('active');
                } else if (stepNumber === currentStep) {
                    indicator.classList.add('active');
                    indicator.classList.remove('completed');
                } else {
                    indicator.classList.remove('active', 'completed');
                }
            });

            const badge = document.querySelector('.badge');
            if (badge) {
                badge.textContent = `Paso ${currentStep} de ${totalSteps}`;
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() { 
            // Cargar datos guardados
            loadStoredData();
            
            const nextBtn = document.getElementById('nextBtn');
            const prevBtn = document.getElementById('prevBtn'); 
            
            if (nextBtn) {
                nextBtn.addEventListener('click', function(e) {
                    e.preventDefault(); 
                    try {
                        nextStep(); 
                    } catch (error) { 
                        alert('Error: ' + error.message);
                    }
                }); 
            }
            
            if (prevBtn) {
                prevBtn.addEventListener('click', function(e) {
                    e.preventDefault(); 
                    prevStep();
                });
            }
            
            // Restaurar datos del paso inicial si existen
            setTimeout(() => {
                restoreCurrentStepData();
            }, 100);
            
            // Agregar listeners para guardar datos automáticamente cuando cambian
            const stepContainer = document.getElementById('step-container');
            if (stepContainer) {
                stepContainer.addEventListener('change', function(e) {
                    if (e.target.matches('input, select, textarea')) {
                        saveCurrentStepData();
                    }
                });
                
                stepContainer.addEventListener('input', function(e) {
                    if (e.target.matches('input, textarea')) {
                        saveCurrentStepData();
                    }
                });
            }
            
            // Agregar listener al formulario para limpiar datos al enviar
            const form = document.getElementById('vacunacionForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    // Guardar los datos del paso final antes de enviar
                    saveCurrentStepData();
                    // Nota: Los datos se limpiarán después de un envío exitoso
                    // Esto se puede manejar desde el servidor o con una confirmación
                });
            }
        });
    </script>
}
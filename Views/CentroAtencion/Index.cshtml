@using Highdmin.ViewComponents
@model CentroAtencionViewModel
@{
    ViewData["Title"] = "Centros de Atención";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
} 

<!-- Info Card -->
@await Component.InvokeAsync("GradientCard", new { 
    title = "Configuración de Centros de Atención",
    description = "Administre los centros de atención del sistema de salud.",
    icon = "ri-building-line",
    startColor = "#667eea",
    endColor = "#764ba2"
}) 

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-0 shadow-sm">
            <div class="card-body py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="flex-grow-1">
                        <p class="text-uppercase fw-medium text-muted mb-1 fs-13">Total Centros</p>
                        <h3 class="fw-bold mb-0 text-primary"><span class="counter-value" data-target="@Model.TotalCentros">@Model.TotalCentros</span></h3>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="avatar-sm">
                            <span class="avatar-title bg-primary-subtle rounded-circle fs-4">
                                <i class="ri-building-line text-primary"></i>
                            </span>
                        </div>
                    </div>
                </div> 
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-0 shadow-sm">
            <div class="card-body py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="flex-grow-1">
                        <p class="text-uppercase fw-medium text-muted mb-1 fs-13">Activos</p>
                        <h3 class="fw-bold mb-0 text-success"><span class="counter-value" data-target="@Model.CentrosActivos">@Model.CentrosActivos</span></h3>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="avatar-sm">
                            <span class="avatar-title bg-success-subtle rounded-circle fs-4">
                                <i class="ri-checkbox-circle-line text-success"></i>
                            </span>
                        </div>
                    </div>
                </div> 
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-0 shadow-sm">
            <div class="card-body py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="flex-grow-1">
                        <p class="text-uppercase fw-medium text-muted mb-1 fs-13">Usuarios Asignados</p>
                        <h3 class="fw-bold mb-0 text-primary"><span class="counter-value" data-target="@Model.CentrosInactivos">@Model.CentrosInactivos</span></h3>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="avatar-sm">
                            <span class="avatar-title bg-primary-subtle text-primary rounded-circle fs-16">
                                <i class="ri-user-settings-line"></i>
                            </span>
                        </div>
                    </div>
                </div> 
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-0 shadow-sm">
            <div class="card-body py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="flex-grow-1">
                        <p class="text-uppercase fw-medium text-muted mb-1 fs-13">Tipos de Centros</p>
                        <h3 class="fw-bold mb-0 text-secondary"><span class="counter-value" data-target="@Model.CentrosInactivos">@Model.CentrosInactivos</span></h3>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="avatar-sm">
                            <span class="avatar-title bg-secondary-subtle rounded-circle fs-4">
                                <i class="ri-map-pin-line text-secondary"></i>
                            </span>
                        </div>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>

<!-- Main Content Card -->
<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center">
            <div class="flex-shrink-0">
                <div class="avatar-sm">
                    <span class="avatar-title bg-primary-subtle text-primary rounded-circle fs-5">
                        <i class="ri-building-line"></i>
                    </span>
                </div>
            </div>
            <div class="flex-grow-1 ms-2">
                <h5 class="card-title mb-1">Centros de Atención (@Model.TotalCentros)</h5>
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- Search and Filter Bar -->
        <div class="row g-3 mb-4">
            <div class="col-xxl-5 col-sm-6">
                <div class="search-box">
                    <input type="text" class="form-control search" placeholder="Buscar por código o nombre...">
                </div>
            </div>
            <div class="col-xxl-2 col-sm-6">
                <div>
                    <select class="form-control" data-plugin="choices" data-choices data-choices-search-false name="choices-single-default" id="idStatus">
                        <option value="">Todos los estados</option>
                        <option value="true" selected>Activo</option>
                        <option value="false">Inactivo</option>
                    </select>
                </div>
            </div>
            <div class="col-xxl-2 col-sm-4">
                <div>
                    <button type="button" class="btn btn-primary w-100" onclick="SearchData();">
                        <i class="ri-equalizer-fill me-1 align-bottom"></i> Filtros
                    </button>
                </div>
            </div>
            <div class="col-xxl-3 col-sm-8">
                <div class="d-flex gap-2">
                    <a asp-action="Create" class="btn btn-success add-btn">
                        <i class="ri-add-line align-bottom me-1"></i> Agregar
                    </a>
                    @await Component.InvokeAsync("ImportExportButtons", new {
                        controller = "CentroAtencion",
                        importAction = "ImportarPlantilla",
                        exportAction = "Exportar",
                        importLabel = "Importar",
                        exportLabel = "Exportar",
                        importClass = "btn btn-info",
                        exportClass = "btn btn-warning",
                        showImport = true,
                        showExport = true
                    }) 
                </div>
            </div>
        </div>

        <!-- Alerts -->
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible alert-label-icon fade show" role="alert">
                <i class="ri-check-double-line label-icon"></i><strong>Éxito</strong> - @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible alert-label-icon fade show" role="alert">
                <i class="ri-error-warning-line label-icon"></i><strong>Error</strong> - @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Table -->
        <div class="table-responsive table-card mt-3 mb-1">
            <table class="table align-middle table-nowrap" id="centroAtencionTable">
                <thead class="thead-light">
                    <tr>
                        <th class="sort" data-sort="codigo">Código</th>
                        <th class="sort" data-sort="nombre">Nombre</th>
                        <th class="sort" data-sort="tipo">Tipo</th>
                        <th class="sort" data-sort="descripcion">Descripción</th>
                        <th class="sort" data-sort="estado">Estado</th>
                        <th class="sort" data-sort="fecha">Fecha Creación</th>
                        <th class="sort text-center" data-sort="action">Acciones</th>
                    </tr>
                </thead>
                <tbody class="list form-check-all">
                    @foreach (var centro in Model.CentrosAtencion)
                    {
                        <tr>
                            <td class="codigo">
                                <span class="badge bg-primary-subtle text-primary fs-12">@centro.Codigo</span>
                            </td>
                            <td class="nombre">
                                <div class="d-flex align-items-center">
                                    <div class="avatar-xs me-3">
                                        <span class="avatar-title bg-primary-subtle text-primary rounded-circle fs-16">
                                            <i class="ri-building-line"></i>
                                        </span>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="fs-14 mb-0">@centro.Nombre</h6>
                                    </div>
                                </div>
                            </td>
                            <td class="tipo">
                                <span class="text-muted">@centro.Tipo</span>
                            </td>
                            <td class="descripcion">
                                <span class="text-muted">@(string.IsNullOrEmpty(centro.Descripcion) ? "Sin descripción" : centro.Descripcion)</span>
                            </td>
                            <td class="estado">
                                @if (centro.Estado)
                                {
                                    <span class="badge bg-success-subtle text-success text-uppercase">Activo</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger-subtle text-danger text-uppercase">Inactivo</span>
                                }
                            </td>
                            <td class="fecha">
                                <span class="text-muted">@centro.FechaCreacion.ToString("dd/MM/yyyy")</span>
                            </td>
                            @if (Model.CanUpdate || Model.CanDelete)
                            {
                                <td>
                                    @await Component.InvokeAsync("ActionButtons", 
                                        ActionButtonsHelper
                                            .CreateDefault(centro.Id, "CentroAtencion", $"Código: {centro.Codigo}")
                                            .WithEdit(Model.CanUpdate)
                                            .WithDelete(Model.CanDelete, "¿Está seguro de que desea eliminar este Centro de Atención?")
                                    )
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            @if (!Model.CentrosAtencion.Any())
            {
                <div class="noresult text-center py-4">
                    <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#121331,secondary:#08a88a" style="width:75px;height:75px"></lord-icon>
                    <h5 class="mt-2">¡Lo siento! No se encontraron resultados</h5>
                    <p class="text-muted mb-3">No hay centros de atención registrados en el sistema.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="ri-add-line me-1"></i> Agregar Primer Centro
                    </a>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-end">
            <div class="pagination-wrap hstack gap-2">
                <a class="page-item pagination-prev disabled" href="javascript:void(0);">
                    Anterior
                </a>
                <ul class="pagination listjs-pagination mb-0"></ul>
                <a class="page-item pagination-next" href="javascript:void(0);">
                    Siguiente
                </a>
            </div>
        </div>
    </div>
</div>

 
@section Scripts {
    <script src="~/libs/list.js/list.min.js"></script>
    <script src="~/libs/list.pagination.js/list.pagination.min.js"></script>
    
    <script> 

        // Initialize list.js for search and pagination
        var options = {
            valueNames: ['codigo', 'nombre', 'descripcion', 'estado', 'fecha'],
            page: 10,
            pagination: true
        };

        var contactList = new List('centroAtencionTable', options);

        // Search functionality
        document.querySelector('.search').addEventListener('input', function(e) {
            contactList.search(e.target.value);
        });

        // Counter animation
        document.addEventListener('DOMContentLoaded', function() {
            const counters = document.querySelectorAll('.counter-value');
            counters.forEach(counter => {
                const target = parseInt(counter.getAttribute('data-target'));
                const increment = target / 100;
                let current = 0;
                
                const updateCounter = () => {
                    if (current < target) {
                        current += increment;
                        counter.textContent = Math.ceil(current);
                        setTimeout(updateCounter, 20);
                    } else {
                        counter.textContent = target;
                    }
                };
                
                updateCounter();
            });
        });
    </script>
}